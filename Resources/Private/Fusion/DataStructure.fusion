prototype(Garagist.ImageDirectory:DataStructure) < prototype(Neos.Fusion:Component) {
    @propTypes {
        prefixCopyright = ${PropTypes.string}
        defaultCopyright = ${PropTypes.string}
        imageWidth = ${PropTypes.integer}
    }

    rawList = Garagist.ImageDirectory:RawList

    prefixCopyright = ${Configuration.setting('Garagist.ImageDirectory.prefixCopyright')}
    defaultCopyright = ${Configuration.setting('Garagist.ImageDirectory.defaultCopyright')}
    imageWidth = ${Configuration.setting('Garagist.ImageDirectory.imageWidth')}

    renderer = Neos.Fusion:Map {
        @process.filter = ${Array.filter(value)}
        items = ${props.rawList}
        itemName = 'document'
        itemRenderer = Neos.Fusion:DataStructure {
            nodeUri = Neos.Neos:NodeUri {
                node = ${document.node}
            }
            label = ${document.label}
            title = ${document.title}
            identifier = ${document.identifier}
            nodeType = ${document.nodeType}
            node = ${document.node}

            assets = Neos.Fusion:Map {
                @process.filter = ${Array.filter(value)}
                items = ${document.assets}
                itemName = 'asset'
                itemRenderer = Neos.Fusion:DataStructure {
                    title = ${asset['title']}
                    caption = ${asset['caption']}
                    copyright = ${asset['copyrightNotice'] || props.defaultCopyright}
                    copyright.@process.prefix = ${value ? props.prefixCopyright + value : null}
                    imageWidth = ${props.imageWidth}
                    imageUri = Neos.Neos:ImageUri {
                        @if.isImage = ${Type.instance(asset, 'Neos\Media\Domain\Model\ImageInterface')}
                        asset = ${asset}
                        width = ${props.imageWidth}
                        async = true
                    }
                }
            }
        }
    }
}
